package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Resultdetails resultdetails
// swagger:model Resultdetails
type Resultdetails struct {

	// v a f
	VAF *float32 `json:"resultdetails.VAF,omitempty" db:"resultdetails.VAF"`

	// c nomenclature
	CNomenclature *string `json:"resultdetails.c_nomenclature,omitempty" db:"resultdetails.c_nomenclature"`

	// coverage
	Coverage *int64 `json:"resultdetails.coverage,omitempty" db:"resultdetails.coverage"`

	// exon
	Exon *int64 `json:"resultdetails.exon,omitempty" db:"resultdetails.exon"`

	// gene
	Gene *string `json:"resultdetails.gene,omitempty" db:"resultdetails.gene"`

	// p nomenclature
	PNomenclature *string `json:"resultdetails.p_nomenclature,omitempty" db:"resultdetails.p_nomenclature"`

	// pcr
	Pcr *string `json:"resultdetails.pcr,omitempty" db:"resultdetails.pcr"`

	// quality score
	QualityScore *float32 `json:"resultdetails.quality_score,omitempty" db:"resultdetails.quality_score"`

	// result
	Result *string `json:"resultdetails.result,omitempty" db:"resultdetails.result"`

	// results details id
	ResultsDetailsID *string `json:"resultdetails.results_details_id,omitempty" db:"resultdetails.results_details_id"`

	// results id
	ResultsID *string `json:"resultdetails.results_id,omitempty" db:"resultdetails.results_id"`

	// risk score
	RiskScore *float32 `json:"resultdetails.risk_score,omitempty" db:"resultdetails.risk_score"`

	// uid
	UID *string `json:"resultdetails.uid,omitempty" db:"resultdetails.uid"`
}

// Validate validates this resultdetails
func (m *Resultdetails) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *Resultdetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Resultdetails) UnmarshalBinary(b []byte) error {
	var res Resultdetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
