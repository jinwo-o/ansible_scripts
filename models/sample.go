package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Sample sample
// swagger:model Sample
type Sample struct {

	// cf plasma location
	CfPlasmaLocation *string `json:"samples.cf_plasma_location,omitempty" db:"samples.cf_plasma_location"`

	// comments
	Comments *string `json:"samples.comments,omitempty" db:"samples.comments"`

	// container id
	ContainerID *string `json:"samples.container_id,omitempty" db:"samples.container_id"`

	// container name
	ContainerName *string `json:"samples.container_name,omitempty" db:"samples.container_name"`

	// container type
	ContainerType *string `json:"samples.container_type,omitempty" db:"samples.container_type"`

	// container well
	ContainerWell *string `json:"samples.container_well,omitempty" db:"samples.container_well"`

	// copath num
	CopathNum *string `json:"samples.copath_num,omitempty" db:"samples.copath_num"`

	// date collected
	DateCollected *time.Time `json:"samples.date_collected,omitempty" db:"samples.date_collected"`

	// date received
	DateReceived *time.Time `json:"samples.date_received,omitempty" db:"samples.date_received"`

	// date submitted
	DateSubmitted *time.Time `json:"samples.date_submitted,omitempty" db:"samples.date_submitted"`

	// delta ct value
	DeltaCtValue *float32 `json:"samples.delta_ct_value,omitempty" db:"samples.delta_ct_value"`

	// dna concentration
	DnaConcentration *float32 `json:"samples.dna_concentration,omitempty" db:"samples.dna_concentration"`

	// dna extraction date
	DnaExtractionDate *time.Time `json:"samples.dna_extraction_date,omitempty" db:"samples.dna_extraction_date"`

	// dna location
	DnaLocation *string `json:"samples.dna_location,omitempty" db:"samples.dna_location"`

	// dna quality
	DnaQuality *string `json:"samples.dna_quality,omitempty" db:"samples.dna_quality"`

	// dna quality by rnase p
	DnaQualityByRnaseP *float32 `json:"samples.dna_quality_by_rnase_p,omitempty" db:"samples.dna_quality_by_rnase_p"`

	// dna sample barcode
	DnaSampleBarcode *string `json:"samples.dna_sample_barcode,omitempty" db:"samples.dna_sample_barcode"`

	// dna volume
	DnaVolume *float32 `json:"samples.dna_volume,omitempty" db:"samples.dna_volume"`

	// facility
	Facility *string `json:"samples.facility,omitempty" db:"samples.facility"`

	// ffpe qc date
	FfpeQcDate *time.Time `json:"samples.ffpe_qc_date,omitempty" db:"samples.ffpe_qc_date"`

	// h e slide location
	HESlideLocation *string `json:"samples.h_e_slide_location,omitempty" db:"samples.h_e_slide_location"`

	// has sample files
	HasSampleFiles *bool `json:"samples.has_sample_files,omitempty" db:"samples.has_sample_files"`

	// historical diagnosis
	HistoricalDiagnosis *string `json:"samples.historical_diagnosis,omitempty" db:"samples.historical_diagnosis"`

	// material received
	MaterialReceived *string `json:"samples.material_received,omitempty" db:"samples.material_received"`

	// material received num
	MaterialReceivedNum *string `json:"samples.material_received_num,omitempty" db:"samples.material_received_num"`

	// material received other
	MaterialReceivedOther *string `json:"samples.material_received_other,omitempty" db:"samples.material_received_other"`

	// name of requestor
	NameOfRequestor *string `json:"samples.name_of_requestor,omitempty" db:"samples.name_of_requestor"`

	// non uhn id
	NonUhnID *string `json:"samples.non_uhn_id,omitempty" db:"samples.non_uhn_id"`

	// other identifier
	OtherIdentifier *string `json:"samples.other_identifier,omitempty" db:"samples.other_identifier"`

	// pb bm location
	PbBmLocation *string `json:"samples.pb_bm_location,omitempty" db:"samples.pb_bm_location"`

	// plasma location
	PlasmaLocation *string `json:"samples.plasma_location,omitempty" db:"samples.plasma_location"`

	// reviewed by
	ReviewedBy *string `json:"samples.reviewed_by,omitempty" db:"samples.reviewed_by"`

	// rna concentration
	RnaConcentration *float32 `json:"samples.rna_concentration,omitempty" db:"samples.rna_concentration"`

	// rna extraction date
	RnaExtractionDate *time.Time `json:"samples.rna_extraction_date,omitempty" db:"samples.rna_extraction_date"`

	// rna location
	RnaLocation *string `json:"samples.rna_location,omitempty" db:"samples.rna_location"`

	// rna lysate location
	RnaLysateLocation *string `json:"samples.rna_lysate_location,omitempty" db:"samples.rna_lysate_location"`

	// rna quality
	RnaQuality *float32 `json:"samples.rna_quality,omitempty" db:"samples.rna_quality"`

	// rna volume
	RnaVolume *float32 `json:"samples.rna_volume,omitempty" db:"samples.rna_volume"`

	// rnase p date
	RnasePDate *time.Time `json:"samples.rnase_p_date,omitempty" db:"samples.rnase_p_date"`

	// sample id
	SampleID *string `json:"samples.sample_id,omitempty" db:"samples.sample_id"`

	// sample name
	SampleName *string `json:"samples.sample_name,omitempty" db:"samples.sample_name"`

	// sample size
	SampleSize *string `json:"samples.sample_size,omitempty" db:"samples.sample_size"`

	// sample type
	SampleType *string `json:"samples.sample_type,omitempty" db:"samples.sample_type"`

	// se num
	SeNum *string `json:"samples.se_num,omitempty" db:"samples.se_num"`

	// study id
	StudyID *string `json:"samples.study_id,omitempty" db:"samples.study_id"`

	// surgical num
	SurgicalNum *string `json:"samples.surgical_num,omitempty" db:"samples.surgical_num"`

	// test requested
	TestRequested *string `json:"samples.test_requested,omitempty" db:"samples.test_requested"`

	// tumor percnt of circled
	TumorPercntOfCircled *float32 `json:"samples.tumor_percnt_of_circled,omitempty" db:"samples.tumor_percnt_of_circled"`

	// tumor percnt of total
	TumorPercntOfTotal *float32 `json:"samples.tumor_percnt_of_total,omitempty" db:"samples.tumor_percnt_of_total"`

	// tumor site
	TumorSite *string `json:"samples.tumor_site,omitempty" db:"samples.tumor_site"`

	// volume of blood marrow
	VolumeOfBloodMarrow *float32 `json:"samples.volume_of_blood_marrow,omitempty" db:"samples.volume_of_blood_marrow"`

	// wbc location
	WbcLocation *string `json:"samples.wbc_location,omitempty" db:"samples.wbc_location"`

	// patient id
	PatientID *string `json:"samples.patient_id,omitempty" db:"samples.patient_id"`
}

// Validate validates this sample
func (m *Sample) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *Sample) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Sample) UnmarshalBinary(b []byte) error {
	var res Sample
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
