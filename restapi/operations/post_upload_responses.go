// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// PostUploadOKCode is the HTTP code returned for type PostUploadOK
const PostUploadOKCode int = 200

/*PostUploadOK OK

swagger:response postUploadOK
*/
type PostUploadOK struct {

	/*
	  In: Body
	*/
	Payload bool `json:"body,omitempty"`
}

// NewPostUploadOK creates PostUploadOK with default headers values
func NewPostUploadOK() *PostUploadOK {
	return &PostUploadOK{}
}

// WithPayload adds the payload to the post upload o k response
func (o *PostUploadOK) WithPayload(payload bool) *PostUploadOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post upload o k response
func (o *PostUploadOK) SetPayload(payload bool) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUploadOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// PostUploadNotFoundCode is the HTTP code returned for type PostUploadNotFound
const PostUploadNotFoundCode int = 404

/*PostUploadNotFound File not found

swagger:response postUploadNotFound
*/
type PostUploadNotFound struct {
}

// NewPostUploadNotFound creates PostUploadNotFound with default headers values
func NewPostUploadNotFound() *PostUploadNotFound {
	return &PostUploadNotFound{}
}

// WriteResponse to the client
func (o *PostUploadNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

// PostUploadConflictCode is the HTTP code returned for type PostUploadConflict
const PostUploadConflictCode int = 409

/*PostUploadConflict an existing item already exists

swagger:response postUploadConflict
*/
type PostUploadConflict struct {
}

// NewPostUploadConflict creates PostUploadConflict with default headers values
func NewPostUploadConflict() *PostUploadConflict {
	return &PostUploadConflict{}
}

// WriteResponse to the client
func (o *PostUploadConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(409)
}
