// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// AddSampleOKCode is the HTTP code returned for type AddSampleOK
const AddSampleOKCode int = 200

/*AddSampleOK id

swagger:response addSampleOK
*/
type AddSampleOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewAddSampleOK creates AddSampleOK with default headers values
func NewAddSampleOK() *AddSampleOK {
	return &AddSampleOK{}
}

// WithPayload adds the payload to the add sample o k response
func (o *AddSampleOK) WithPayload(payload string) *AddSampleOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add sample o k response
func (o *AddSampleOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddSampleOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// AddSampleBadRequestCode is the HTTP code returned for type AddSampleBadRequest
const AddSampleBadRequestCode int = 400

/*AddSampleBadRequest invalid input, object invalid

swagger:response addSampleBadRequest
*/
type AddSampleBadRequest struct {
}

// NewAddSampleBadRequest creates AddSampleBadRequest with default headers values
func NewAddSampleBadRequest() *AddSampleBadRequest {
	return &AddSampleBadRequest{}
}

// WriteResponse to the client
func (o *AddSampleBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}

// AddSampleConflictCode is the HTTP code returned for type AddSampleConflict
const AddSampleConflictCode int = 409

/*AddSampleConflict an existing item already exists

swagger:response addSampleConflict
*/
type AddSampleConflict struct {
}

// NewAddSampleConflict creates AddSampleConflict with default headers values
func NewAddSampleConflict() *AddSampleConflict {
	return &AddSampleConflict{}
}

// WriteResponse to the client
func (o *AddSampleConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(409)
}
