// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// AddResultOKCode is the HTTP code returned for type AddResultOK
const AddResultOKCode int = 200

/*AddResultOK id

swagger:response addResultOK
*/
type AddResultOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewAddResultOK creates AddResultOK with default headers values
func NewAddResultOK() *AddResultOK {
	return &AddResultOK{}
}

// WithPayload adds the payload to the add result o k response
func (o *AddResultOK) WithPayload(payload string) *AddResultOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add result o k response
func (o *AddResultOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddResultOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// AddResultBadRequestCode is the HTTP code returned for type AddResultBadRequest
const AddResultBadRequestCode int = 400

/*AddResultBadRequest invalid input, object invalid

swagger:response addResultBadRequest
*/
type AddResultBadRequest struct {
}

// NewAddResultBadRequest creates AddResultBadRequest with default headers values
func NewAddResultBadRequest() *AddResultBadRequest {
	return &AddResultBadRequest{}
}

// WriteResponse to the client
func (o *AddResultBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}

// AddResultConflictCode is the HTTP code returned for type AddResultConflict
const AddResultConflictCode int = 409

/*AddResultConflict an existing item already exists

swagger:response addResultConflict
*/
type AddResultConflict struct {
}

// NewAddResultConflict creates AddResultConflict with default headers values
func NewAddResultConflict() *AddResultConflict {
	return &AddResultConflict{}
}

// WriteResponse to the client
func (o *AddResultConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(409)
}
