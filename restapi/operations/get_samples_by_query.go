// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetSamplesByQueryHandlerFunc turns a function with the right signature into a get samples by query handler
type GetSamplesByQueryHandlerFunc func(GetSamplesByQueryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetSamplesByQueryHandlerFunc) Handle(params GetSamplesByQueryParams) middleware.Responder {
	return fn(params)
}

// GetSamplesByQueryHandler interface for that can handle valid get samples by query params
type GetSamplesByQueryHandler interface {
	Handle(GetSamplesByQueryParams) middleware.Responder
}

// NewGetSamplesByQuery creates a new http.Handler for the get samples by query operation
func NewGetSamplesByQuery(ctx *middleware.Context, handler GetSamplesByQueryHandler) *GetSamplesByQuery {
	return &GetSamplesByQuery{Context: ctx, Handler: handler}
}

/*GetSamplesByQuery swagger:route POST /query getSamplesByQuery

Query for Sample

*/
type GetSamplesByQuery struct {
	Context *middleware.Context
	Handler GetSamplesByQueryHandler
}

func (o *GetSamplesByQuery) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	// rw.Header().Set("Access-Control-Allow-Origin", "*")
	// rw.Header().Set("Access-Control-Allow-Methods", "POST, GET, OPTIONS, PUT, DELETE")
	// rw.Header().Set("Access-Control-Allow-Headers","Accept, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization")
	// rw.Header().Set("Access-Control-Allow-Credentials", "true")
	//r.Header().Set("Access-Control-Allow-Origin", "*")
	//r.Header().Set("Access-Control-Allow-Methods", "POST, GET, OPTIONS, PUT, DELETE")
	//r.Header().Set("Access-Control-Allow-Headers","Accept, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization")
	//r.Header().Set("Access-Control-Allow-Credentials", "true")
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetSamplesByQueryParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
